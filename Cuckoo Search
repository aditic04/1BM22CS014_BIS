import numpy as np
import math
import random

def fitness_function(solution):
    distance = 0
    for i in range(len(solution) - 1):
        distance += distance_matrix[solution[i]][solution[i + 1]]
    distance += distance_matrix[solution[-1]][solution[0]]
    return distance

def initialize_nests(num_nests, n_cities):
    nests = [random.sample(range(n_cities), n_cities) for _ in range(num_nests)]
    return nests

def levy_flight(Lambda=1.5):
    sigma_u = np.power((math.gamma(1 + Lambda) * math.sin(np.pi * Lambda / 2) /
                        (math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2))), 1 / Lambda)
    u = np.random.normal(0, sigma_u, 1)
    v = np.random.normal(0, 1, 1)
    step = u / np.power(np.abs(v), 1 / Lambda)
    return step[0]

def generate_new_solution(current_solution, best_solution, step_size):
    new_solution = current_solution[:]
    idx1, idx2 = random.sample(range(len(new_solution)), 2)
    new_solution[idx1], new_solution[idx2] = new_solution[idx2], new_solution[idx1]
    return new_solution

def cuckoo_search(num_nests, num_iterations, step_size=0.1):
    nests = initialize_nests(num_nests, n_cities)
    fitness_values = [fitness_function(nest) for nest in nests]
    best_index = np.argmin(fitness_values)
    best_nest = nests[best_index]
    best_fitness = fitness_values[best_index]
    for iteration in range(num_iterations):
        new_nests = []
        for nest in nests:
            new_solution = generate_new_solution(nest, best_nest, step_size)
            new_nests.append(new_solution)
        new_fitness_values = [fitness_function(nest) for nest in new_nests]
        for i in range(num_nests):
            if new_fitness_values[i] < fitness_values[i]:
                nests[i] = new_nests[i]
                fitness_values[i] = new_fitness_values[i]
        current_best_index = np.argmin(fitness_values)
        if fitness_values[current_best_index] < best_fitness:
            best_nest = nests[current_best_index]
            best_fitness = fitness_values[current_best_index]
        print(f"Iteration {iteration + 1}/{num_iterations} - Best Distance: {best_fitness}")
    return best_nest, best_fitness

def create_distance_matrix(n_cities):
    np.random.seed(0)
    matrix = np.random.randint(1, 100, size=(n_cities, n_cities))
    np.fill_diagonal(matrix, 0)
    return matrix

n_cities = 10
num_nests = 50
num_iterations = 20
step_size = 0.1
distance_matrix = create_distance_matrix(n_cities)

best_solution, best_fitness = cuckoo_search(num_nests, num_iterations, step_size)

print(f"Best route found: {best_solution} with distance: {best_fitness}")
print("Aditi C (1BM22CS014)")
